const games = require('./games')

exports.genderKeyboard = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '–ü–∞—Ä–µ–Ω—å' },
                { text: '–î–µ–≤—É—à–∫–∞' }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}

exports.likesMarkup = {
    inline_keyboard: [
        [ 
            { text: '–ù—Ä–∞–≤–∏—Ç—Å—è üëç', callback_data: 'like' }, 
            { text: '–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëé', callback_data: 'dislike' } 
        ]
    ]
}

exports.offerLikeMarkup = (telegram_id) => {
    return { inline_keyboard: [
            [ 
                { text: '–£–±—Ä–∞—Ç—å ‚ùå', callback_data: 'offer_dislike.' + telegram_id }, 
                { text: '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëç', callback_data: 'offer_like.' + telegram_id} 
            ]
        ]
    }
}

exports.filterGender = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '–ü–∞—Ä–µ–Ω—å' },
                { text: '–î–µ–≤—É—à–∫–∞' },
                { text: '–õ—é–±–æ–π' }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}

exports.geolocation = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location: true }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}


exports.null = { 
    parse_mode: "HTML",
    reply_markup: {
        remove_keyboard: true
    }
}

exports.ranksGame = (game) => {
    const ranksButtons = games.getGamesRanks(game).map((rank) => {
        return [ { text: rank, callback_data: JSON.stringify({ game, rank }) } ]
    })

    return { 
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [[{ text: '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', callback_data: JSON.stringify({ game, rank: null }) }], ...ranksButtons]
        }
    }
}

exports.games = (only_markup = false) => {
    const gamesButtons = games.getGamesList().map((game) => {
        return [ { text: game, callback_data: game } ]
    })

    if (only_markup) {
        return {
            inline_keyboard: gamesButtons
        }
    } else {
        return { 
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: gamesButtons
            }
        }
    }
}

exports.gamesKeyboard = (userGames = null) => {
    let gamesButtons = null
    if (userGames) {
        gamesButtons = userGames.map((game) => {
            return [ { text: game } ]
        })
    } else {
        gamesButtons = games.getGamesList().map((game) => {
            return [ { text: game } ]
        })
    }
    

    return { 
        parse_mode: "HTML",
        reply_markup: {
            keyboard: [
                [
                    { text: '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }
                ],
                ...gamesButtons
            ],
            resize_keyboard: true
        }
    }
}

exports.profile = { 
    reply_markup: {
        keyboard: [
            [ { text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' }, { text: '–ó–∞–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä' } ],
            [ { text: '–£–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–∞—Ö' }, { text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ' } ],
            [ { text: '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' } ]
        ],
        resize_keyboard: true
    }
}

exports.main = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [ { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è' } ],
            [ { text: '–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤' } ],
            [ { text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å GSpot' } ]
        ],
        resize_keyboard: true
    }
}

exports.search_filter = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [ { text: '–ü–æ–∏—Å–∫' } ],
            [ { text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞' } ],
            [ { text: '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ' } ]
        ],
        resize_keyboard: true
    }
}

exports.change_filters = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [ { text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥' } ],
            [ { text: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—ã' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–∫–æ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–∞—Ö' } ],
            [ { text: '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ' } ]
        ],
        resize_keyboard: true
    }
}

exports.done = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '–ì–æ—Ç–æ–≤–æ' }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}

exports.cancel = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ' }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}

exports.filtersGames = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '–õ—é–±—ã–µ –∏–≥—Ä—ã' },
                { text: '‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ' }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}

exports.any = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '–õ—é–±–æ–π' }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}

exports.filtersCity = { 
    parse_mode: "HTML",
    reply_markup: {
        keyboard: [
            [
                { text: '–£–∫–∞–∑–∞—Ç—å –º–æ–π –≥–æ—Ä–æ–¥' },
                { text: '–õ—é–±–æ–π' }
            ],
        ],
        one_time_keyboard: true,
        resize_keyboard: true
    }
}
